#include <iostream>
#include <string>


int main() {
	setlocale(LC_ALL, "ru");
	// книга: читстый код - Роберт Мартин
	// Столяров : оформление програмного кода
	/*
	Инструментально реализуемые концепции:

	Инкапсуляция - механизм ООП позволяющий объеденять данные с методами их обработки, а так же предоставляющий механизмы их сокрытия
	(класс скрывает данные от внешнего зрителя)

	Наследование - "это механизм языка который позволяет расширить функционал базового класса путем сужения его специализации". 
	Используется только в тех ситуациях когда нужно включить полиморфизм

	Полиморфизм - способ писать программу в виде линейных алгоритмов сохраняя динамическое поведение 

	Теоретические концепции:
	
	Абстракция - оставляем только те парамметры которые критически важны для реализуемого продукта;
	Пересылка сообщений - ОО код считается кода происходит общение минимум двух классов;
	Повтореное использование кода - единажды написанный код используется много раз.
	

	Подходы/принципы разработки:
	1.SOLID:
	Srp - принцип единственной ответственности - каждый модуль программы должен иметь одну, и только одну, ответственность;
	Ocp - принцип открытости/закрытости - система должна быть открыта для расширения, но закрыта для изменения существующего кода; 
	Lsp - принцип подстановки Барбары Лисков - классы наследники должны строго выполнять контракт класса родителя;
	Isp - принцип разделения интерфейсов - у каждого модуля программы должно быть столько интерфейсов, сколько разных категорий пользователей у него есть;
	Dip - принцип инверсии зависимости - классы формируются не исходя из своей деятельности, а исходя из того как ими пользуются.


	*/



	return 0;
}